            "#include <stdio.h>",
            "#include <stdlib.h>",
            "#include <string.h>",
            "#include <ctype.h>",
            "#include <time.h>",
            "",
            "//cd..; cd java; cd TCPClient; cd src; java TCPclient",
            "",
            "#define hash_mod 400009",
            "#define hash_len 8",
            "#define win_linux 2",
            "",
            "typedef struct word",
            "{",
            "\tchar *keyword;",
            "\tlong long num_1;",
            "\tlong long num_2;",
            "\tstruct word *next;",
            "} word;",
            "",
            "typedef struct word_point",
            "{",
            "\tchar *keyword;",
            "\tstruct word_point *next;",
            "\tword *gate;",
            "} word_point;",
            "",
            "word all[450000];",
            "int all_top = 0;",
            "word_point stop_word[hash_mod],dictionary[hash_mod];",
            "FILE *dic,*stop,*art_1,*art_2,*result;",
            "char *word_cache;",
            "",
            "long long word_count_1 = 0,word_count_2 = 0;",
            "void change_to_low(char *);",
            "void insert(word_point *,long long,word_point *);",
            "char *fget_dic(char *,FILE *);",
            "char *fget_word(char *,FILE *);",
            "int find_insert(word_point *,char *,int);",
            "unsigned long long hash(char *);",
            "int cmp_1(const void *,const void *);",
            "int cmp_2(const void *,const void *);",
            "int cmp(const void *,const void *);",
            "void sort(word *,int,int,int,int (const void *,const void *));",
            "void swap(word *,word *);",
            "int random_num(int);",
            "void heap_sort(word *,int,int,int (const void *,const void *));",
            "void adjust(word *,int,int,int (const void *,const void *));",
            "",
            "int main()",
            "{",
            "\tint n,i;",
            "\tword_cache = (char *) malloc (51);",
            "\tif ((dic = fopen(\"dictionary.txt\",\"rb\")) == NULL)",
            "\t\treturn 0;",
            "\tif ((stop = fopen(\"stopwords.txt\",\"rb\")) == NULL)",
            "\t\treturn 0;",
            "\tif ((art_1 = fopen(\"article1.txt\",\"rb\")) == NULL)",
            "\t\treturn 0;",
            "\tif ((art_2 = fopen(\"article2.txt\",\"rb\")) == NULL)",
            "\t\treturn 0;",
            "\tif ((result = fopen(\"results.txt\",\"wb\")) == NULL)",
            "\t\treturn 0;",
            "\twhile(fgets(word_cache,51,stop) != NULL)",
            "\t{",
            "\t\tint len = strlen(word_cache);",
            "\t\tif (word_cache[len - 1] == \'\\n\')",
            "\t\t\tword_cache[-- len] = 0;",
            "\t\tif (word_cache[len - 1] == \'\\r\')",
            "\t\t\tword_cache[-- len] = 0;",
            "\t\tword_point *p = (word_point *) malloc (sizeof(word_point));",
            "\t\tp->gate = NULL;",
            "\t\tp->keyword = (char *) malloc (51);",
            "\t\tp->next = NULL;",
            "\t\tstrcpy(p->keyword,word_cache);",
            "\t\tinsert(stop_word,hash(word_cache),p);",
            "\t}",
            "\twhile(fgets(word_cache,51,dic) != NULL)",
            "\t{",
            "\t\tint len = strlen(word_cache);",
            "\t\tif (word_cache[len - 1] == \'\\n\')",
            "\t\t\tword_cache[-- len] = 0;",
            "\t\tif (word_cache[len - 1] == \'\\r\')",
            "\t\t\tword_cache[-- len] = 0;",
            "\t\tall[all_top].keyword = (char *) malloc (51);",
            "\t\tstrcpy(all[all_top].keyword,word_cache);",
            "\t\tword_point *p = (word_point *) malloc (sizeof(word_point));",
            "\t\tp->gate = &all[all_top];",
            "\t\tp->next = NULL;",
            "\t\tp->keyword = all[all_top].keyword;",
            "\t\tall_top ++;",
            "\t\tinsert(dictionary,hash(word_cache),p);",
            "\t}",
            "",
            "\twhile(fget_word(word_cache,art_1) != NULL)",
            "\t{",
            "\t\tif (find_insert(stop_word,word_cache,0))",
            "\t\t\tcontinue;",
            "\t\tfind_insert(dictionary,word_cache,1);",
            "\t}",
            "\twhile(fget_word(word_cache,art_2) != NULL)",
            "\t{",
            "\t\tif (find_insert(stop_word,word_cache,0))",
            "\t\t\tcontinue;",
            "\t\tfind_insert(dictionary,word_cache,2);",
            "\t}",
            "\tscanf(\"%d\",&n);",
            "\tword *words_1 = (word *) malloc (sizeof(word) * n + 32);",
            "\tword *words_2 = (word *) malloc (sizeof(word) * n + 32);",
            "\tword *words = (word *) malloc (sizeof(word) * n + 32);",
            "\tword *alls = (word *) malloc (sizeof(word) * all_top);",
            "\tint j = 0;",
            "\tfor (i = 0;i < all_top;i ++)",
            "\t{",
            "\t\tif (all[i].num_1 == 0 && all[i].num_2 == 0)",
            "\t\t\tcontinue;",
            "\t\talls[j ++] = all[i];",
            "\t}",
            "\tint alls_top = j;",
            "\tint top_1 = 0,top_2 = 0;",
            "",
            "\tif (n < alls_top)",
            "\t\t//sort(all,0,all_top,n,cmp_1);",
            "\t\theap_sort(alls,alls_top,n,cmp_1);",
            "\ttop_1 = alls_top > n ? n : alls_top;",
            "\tfor (i = 0;i < top_1;i ++)",
            "\t{",
            "\t\twords_1[i].keyword = (char *) malloc (51);",
            "\t\tstrcpy(words_1[i].keyword,alls[i].keyword);",
            "\t\twords_1[i].num_1 = alls[i].num_1;",
            "\t}",
            "\tqsort(words_1,top_1,sizeof(word),cmp_1);",
            "",
            "\tif (n < alls_top)",
            "\t\t//sort(all,0,all_top,n,cmp_2);",
            "\t\theap_sort(alls,alls_top,n,cmp_2);",
            "\ttop_2 = alls_top > n ? n : alls_top;",
            "\tfor (i = 0;i < top_2;i ++)",
            "\t{",
            "\t\twords_2[i].keyword = (char *) malloc (51);",
            "\t\twords[i].keyword = (char *) malloc (51);",
            "\t\tstrcpy(words_2[i].keyword,alls[i].keyword);",
            "\t\twords[i].num_2 = alls[i].num_2;",
            "\t\twords_2[i].num_2 = alls[i].num_2;",
            "\t\tstrcpy(words[i].keyword,alls[i].keyword);",
            "\t}",
            "\tqsort(words_2,top_2,sizeof(word),cmp_2);",
            "\tqsort(words,top_2,sizeof(word),cmp);",
            "",
            "",
            "\tdouble pro_1_all = 0,pro_2_all = 0;",
            "\tdouble pro_1_cache = 0,pro_2_cache = 0;",
            "\tfor (i = 0;i < top_2;i ++)",
            "\t\tpro_2_all += words_2[i].num_2;",
            "\tfor (i = 0;i < top_1;i ++)",
            "\t{",
            "\t\tpro_1_all += words_1[i].num_1;",
            "\t\tword *pro = NULL;",
            "\t\tpro = (word *) bsearch (&words_1[i],words,top_2,sizeof(word),cmp);",
            "\t\tif (pro != NULL)",
            "\t\t{",
            "\t\t\tpro_1_cache += words_1[i].num_1;",
            "\t\t\tpro_2_cache += pro->num_2;",
            "\t\t}",
            "\t}",
            "\tdouble pro_1 = pro_1_cache / pro_1_all;",
            "\tdouble pro_2 = pro_2_cache / pro_2_all;",
            "\tdouble sim;",
            "\tif (pro_1 > pro_2)",
            "\t\tsim = pro_2 / pro_1;",
            "\telse",
            "\t\tsim = pro_1 / pro_2;",
            "\tprintf(\"%.5lf\\n\",sim);",
            "\tfprintf(result,\"%.5lf\\n\\n\",sim);",
            "\tfor (i = 0;i < top_1;i ++)",
            "\t\tfprintf(result,\"%s %lld\\n\",words_1[i].keyword,words_1[i].num_1);",
            "\tfprintf(result,\"\\n\");",
            "\tfor (i = 0;i < top_2;i ++)",
            "\t\tfprintf(result,\"%s %lld\\n\",words_2[i].keyword,words_2[i].num_2);",
            "\tfclose(art_1);",
            "\tfclose(art_2);",
            "\tfclose(dic);",
            "\tfclose(stop);",
            "\tfclose(result);",
            "\tfree(word_cache);",
            "\treturn 0;",
            "}",
            "",
            "void change_to_low(char *word)",
            "{",
            "\tfor (;*word != \'\\0\';word ++)",
            "\t\tif (isupper(*word))",
            "\t\t\t*word = tolower(*word);",
            "\treturn;",
            "}",
            "",
            "unsigned long long hash(char *word_cache)",
            "{",
            "\tchange_to_low(word_cache);",
            "\tunsigned long long hash_code = 0;",
            "\twhile(*word_cache != \'\\0\')",
            "\t\thash_code = (hash_code << 5) + *word_cache ++;//",
            "\thash_code %= hash_mod;",
            "\treturn hash_code;",
            "}",
            "",
            "void insert(word_point *list,long long hash,word_point *p)",
            "{",
            "\tword_point *ptr = list[hash].next;",
            "\tif (ptr == NULL)",
            "\t{",
            "\t\tlist[hash].next = p;",
            "\t\treturn;",
            "\t}",
            "\telse",
            "\t{",
            "\t\tp->next = list[hash].next;",
            "\t\tlist[hash].next = p;",
            "\t\treturn;",
            "\t}",
            "}",
            "",
            "int find_insert(word_point *list,char *word_cache,int article)",
            "{",
            "\tlong long code;",
            "\tcode = hash(word_cache);",
            "\tword_point *ptr = list[code].next;",
            "\tif (ptr == NULL)",
            "\t\treturn 0;",
            "\tfor (;strcmp(ptr->keyword,word_cache) != 0;ptr = ptr->next)",
            "\t\tif (ptr->next == NULL)",
            "\t\t\treturn 0;",
            "\tif (article == 1)",
            "\t\tptr->gate->num_1 ++;",
            "\telse if (article == 2)",
            "\t\tptr->gate->num_2 ++;",
            "\treturn 1;",
            "}",
            "",
            "char *fget_word(char *word_cache,FILE *input)",
            "{",
            "\tchar c;",
            "\tint top = 0;",
            "\twhile(!isalpha(c = fgetc(input)) && c != EOF);",
            "\tif (c == EOF)",
            "\t\treturn NULL;",
            "\tif (isupper(c))",
            "\t\tc = tolower(c);",
            "\tword_cache[top ++] = c;",
            "\twhile(isalpha(c = fgetc(input)) && c != EOF)",
            "\t{",
            "\t\tif (isupper(c))",
            "\t\t\tc = tolower(c);",
            "\t\tword_cache[top ++] = c;",
            "\t}",
            "\tword_cache[top] = \'\\0\';",
            "\treturn word_cache;",
            "}",
            "",
            "int cmp_1(const void *aa,const void *bb)",
            "{",
            "\tword *a = (word *) aa;",
            "\tword *b = (word *) bb;",
            "\tif (a->num_1 > b->num_1)",
            "\t\treturn -1;",
            "\telse if (a->num_1 < b->num_1)",
            "\t\treturn 1;",
            "\telse if (a->num_1 == b->num_1)",
            "\t{",
            "\t\tif (a->num_1 != 0)",
            "\t\t{",
            "\t\t\tif (strcmp(a->keyword,b->keyword) < 0)",
            "\t\t\t\treturn -1;",
            "\t\t\telse",
            "\t\t\t\treturn 1;",
            "\t\t}",
            "\t\telse",
            "\t\t\treturn 0;",
            "\t}",
            "\treturn 0;",
            "}",
            "",
            "int cmp_2(const void *aa,const void *bb)",
            "{",
            "\tword *a = (word *) aa;",
            "\tword *b = (word *) bb;",
            "\tif (a->num_2 > b->num_2)",
            "\t\treturn -1;",
            "\telse if (a->num_2 < b->num_2)",
            "\t\treturn 1;",
            "\telse if (a->num_2 == b->num_2)",
            "\t{",
            "\t\tif (a->num_2 != 0)",
            "\t\t{",
            "\t\t\tif (strcmp(a->keyword,b->keyword) < 0)",
            "\t\t\t\treturn -1;",
            "\t\t\telse",
            "\t\t\t\treturn 1;",
            "\t\t}",
            "\t\telse",
            "\t\t\treturn 0;",
            "\t}",
            "\treturn 0;",
            "}",
            "",
            "int cmp(const void *aa,const void *bb)",
            "{",
            "\tword *a = (word *) aa;",
            "\tword *b = (word *) bb;",
            "\treturn strcmp(a->keyword,b->keyword);",
            "}",
            "",
            "void heap_sort(word *list,int n,int num,int comp(const void *,const void *))",
            "{",
            "\tint i;",
            "\tword temp;",
            "\tfor (i = n / 2 - 1;i >= 0;i --)",
            "\t{",
            "\t\tadjust(list,i,n,comp);",
            "\t}",
            "\tfor (i = n - 1;i >= n - 1 - num;i --)",
            "\t{",
            "\t\ttemp = list[i];",
            "\t\tlist[i] = list[0];",
            "\t\tlist[0] = temp;",
            "\t\tadjust(list,0,i,comp);",
            "\t}",
            "\tfor (i = 0;i < num;i ++)",
            "\t{",
            "\t\ttemp = list[i];",
            "\t\tlist[i] = list[n - 1 - i];",
            "\t\tlist[n - 1 - i] = temp;",
            "\t}",
            "}",
            "",
            "void adjust(word *list,int i,int n,int comp(const void *,const void *))",
            "{",
            "\tint j;",
            "\tword temp;",
            "\ttemp = list[i];",
            "\tj = 2 * i + 1;",
            "\twhile(j < n)",
            "\t{",
            "\t\tif (j + 1 < n && comp(&list[j],&list[j + 1]) > 0)",
            "\t\t\tj ++;",
            "\t\tif (comp(&temp,&list[j]) > 0)",
            "\t\t{",
            "\t\t\tlist[(j - 1) / 2] = list[j];",
            "\t\t\tj = 2 * j + 1;",
            "\t\t}",
            "\t\telse",
            "\t\t\tbreak;",
            "\t}",
            "\tlist[(j - 1) / 2] = temp;",
            "}",
            "",
            "void swap(word *a,word *b)",
            "{",
            "\tword c = *a;",
            "\t*a = *b;",
            "\t*b = c;",
            "\treturn;",
            "}",
            "",
            "int random_num(int size)",
            "{",
            "\tsrand((unsigned)time(NULL));",
            "\treturn rand() % size;",
            "}",
